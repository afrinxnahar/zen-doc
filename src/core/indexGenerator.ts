import { icons } from "./icons.js";
import type { FileInfo } from "./fileRead.js";
import {
  getCategoryTitle,
  getCategoryDescription,
  filterEmptyCategories,
} from "./fileUtils.js";
import { addFrontmatter } from "./contentProcessing.js";

export function generateGettingStartedMdx(
  groupedFiles: Record<string, FileInfo[]>,
  config: any
): string {
  // Filter out empty categories to ensure we only reference existing ones
  const nonEmptyGrouped = filterEmptyCategories(groupedFiles);
  const categories = Object.keys(nonEmptyGrouped);

  // Create a mock FileInfo object for the getting started page
  const gettingStartedFile: FileInfo = {
    path: "getting-started/index.md",
    fileName: "getting-started",
    relativePath: "getting-started/index.md",
    content: "",
    category: "other",
    extension: "md",
  };

  // Generate project-specific description based on available categories
  let projectType = "web application";
  let keyFeatures = [];

  if (categories.includes("api")) {
    keyFeatures.push("API endpoints");
  }
  if (categories.includes("components")) {
    keyFeatures.push("reusable UI components");
  }
  if (categories.includes("pages")) {
    keyFeatures.push("multi-page structure");
  }
  if (categories.includes("lib")) {
    keyFeatures.push("utility functions");
  }

  const projectDescription =
    config.description ||
    `${config.projectName} is a ${projectType} that provides ${keyFeatures.join(", ")}. This documentation is automatically generated to help developers understand the codebase and contribute effectively.`;

  let content = `# Getting Started with ${config.projectName}

Welcome to ${config.projectName}! This guide will help you understand the project structure and get you up and running quickly.

## Project Overview

${projectDescription}

## Project Structure

This project is organized into several key areas:

${categories
  .map((category) => {
    const title = getCategoryTitle(category);
    const description = getCategoryDescription(category);
    const fileCount = nonEmptyGrouped[category].length;
    return `### ${title}
${description}

**Files:** ${fileCount} ${fileCount === 1 ? "file" : "files"}

[View ${title} Documentation â†’](/${category}/)`;
  })
  .join("\n\n")}

## Quick Start

1. **Clone the Repository**: Get the latest version of the codebase
   \`\`\`bash
   git clone <repository-url>
   cd ${config.projectName.toLowerCase()}
   \`\`\`

2. **Install Dependencies**: Install the required packages
   \`\`\`bash
   npm install
   # or yarn install
   # or pnpm install
   \`\`\`

3. **Start Development Server**: Run the project locally
   \`\`\`bash
   npm run dev
   # or yarn dev
   # or pnpm dev
   \`\`\`

4. **Open Your Browser**: Navigate to the local development URL (usually http://localhost:3000)

## Key Features

Based on the project structure, ${config.projectName} offers:

${categories
  .map((category) => {
    const title = getCategoryTitle(category);
    const description = getCategoryDescription(category);
    return `- **${title}**: ${description}`;
  })
  .join("\n")}

## Development Workflow

To contribute to ${config.projectName}:

1. **Create a Feature Branch**: Start with a new branch for your changes
   \`\`\`bash
   git checkout -b feature/your-feature-name
   \`\`\`

2. **Make Your Changes**: Implement your feature or bug fix
3. **Test Your Changes**: Ensure everything works as expected
4. **Commit Your Changes**: Write clear commit messages
   \`\`\`bash
   git add .
   git commit -m "feat: Add your feature description"
   \`\`\`

5. **Push and Create PR**: Submit your changes for review
   \`\`\`bash
   git push origin feature/your-feature-name
   \`\`\`

## Next Steps

Now that you have ${config.projectName} running locally, explore the documentation sections above:

${categories
  .map((category) => {
    const title = getCategoryTitle(category);
    return `- **[${title}](/${category}/)**: ${getCategoryDescription(category)}`;
  })
  .join("\n")}

## Documentation

This documentation is automatically generated from your codebase using ZenDoc. To improve the documentation:

- Add JSDoc comments to your functions and components
- Include descriptive comments in your code
- Use clear and descriptive file and function names
- Follow consistent coding patterns

## Support

For questions or issues related to this project:

- Check the project's main repository
- Review the documentation sections above
- Contact the development team

---

*Documentation generated by ZenDoc - Last updated: ${new Date().toLocaleDateString()}*
`;

  return addFrontmatter(content, gettingStartedFile, "other", config);
}

export function generateIndexMdx(
  groupedFiles: Record<string, FileInfo[]>,
  config: any
): string {
  // Filter out empty categories
  const nonEmptyCategories = filterEmptyCategories(groupedFiles);

  const categories = Object.keys(nonEmptyCategories);
  const availableIcons = icons.slice(0, categories.length);

  let content = `---
title: ${config.projectName} Documentation
description: Comprehensive documentation for ${config.projectName}
template: splash
hero:
  tagline: Project documentation for ${config.projectName}
  image:
    file: "https://github.com/leen-neel/zen-doc-cli/raw/master/assets/logo.png"
  actions:
    - text: Get Started
      link: /getting-started/
      icon: right-arrow
---

import { Card, CardGrid } from '@astrojs/starlight/components';

# Welcome to ${config.projectName}

Welcome to the comprehensive documentation for ${config.projectName}. This documentation is automatically generated from your codebase to provide up-to-date information about your project's components, pages, API routes, and utilities.

## Quick Navigation

<CardGrid cols={2}>

`;

  // Add cards for each category that has files
  categories.forEach((category, index) => {
    const icon = availableIcons[index] || "document";
    const title = getCategoryTitle(category);
    const description = getCategoryDescription(category);
    const fileCount = nonEmptyCategories[category].length;

    content += `  <Card
    title="${title}"
    icon="${icon}"
    text="${description}"
    actions={[
      {
        text: "View ${title}",
        link: "/${category}",
      },
    ]}
  />

`;
  });

  content += `</CardGrid>

## Project Overview

${
  config.description ||
  "This project documentation is automatically generated to help developers understand the codebase structure and functionality."
}

## Getting Started

To get started with ${
    config.projectName
  }, explore the documentation sections above. Each section contains detailed information about different aspects of the project:

${categories
  .map((category) => {
    const title = getCategoryTitle(category);
    const description = getCategoryDescription(category);
    return `- **${title}**: ${description}`;
  })
  .join("\n")}

## Contributing

This documentation is automatically generated from your codebase. To improve the documentation:

1. Add JSDoc comments to your functions and components
2. Include descriptive comments in your code
3. Use clear and descriptive file and function names
4. Follow consistent coding patterns

## Support

For questions or issues related to this documentation, please refer to the project's main repository or contact the development team.

---

*Documentation generated by ZenDoc - Last updated: ${new Date().toLocaleDateString()}*
`;

  return content;
}
